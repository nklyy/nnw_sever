// Code generated by MockGen. DO NOT EDIT.
// Source: user_service.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	user "nnw_s/pkg/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// CreateTemplateUserData mocks base method.
func (m *MockIUserService) CreateTemplateUserData(secret string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplateUserData", secret)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplateUserData indicates an expected call of CreateTemplateUserData.
func (mr *MockIUserServiceMockRecorder) CreateTemplateUserData(secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateUserData", reflect.TypeOf((*MockIUserService)(nil).CreateTemplateUserData), secret)
}

// CreateUser mocks base method.
func (m *MockIUserService) CreateUser(email, password, OTPKey string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", email, password, OTPKey)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserServiceMockRecorder) CreateUser(email, password, OTPKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserService)(nil).CreateUser), email, password, OTPKey)
}

// GetTemplateUserDataById mocks base method.
func (m *MockIUserService) GetTemplateUserDataById(uid string) (*user.TemplateData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateUserDataById", uid)
	ret0, _ := ret[0].(*user.TemplateData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateUserDataById indicates an expected call of GetTemplateUserDataById.
func (mr *MockIUserServiceMockRecorder) GetTemplateUserDataById(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateUserDataById", reflect.TypeOf((*MockIUserService)(nil).GetTemplateUserDataById), uid)
}

// GetUserByEmail mocks base method.
func (m *MockIUserService) GetUserByEmail(email string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIUserServiceMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIUserService)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockIUserService) GetUserById(userId string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", userId)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIUserServiceMockRecorder) GetUserById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIUserService)(nil).GetUserById), userId)
}
