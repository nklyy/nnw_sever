// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_jwt is a generated GoMock package.
package mock_jwt

import (
	context "context"
	jwt "nnw_s/internal/auth/jwt"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateJWT mocks base method.
func (m *MockService) CreateJWT(ctx context.Context, email string) (*jwt.DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWT", ctx, email)
	ret0, _ := ret[0].(*jwt.DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJWT indicates an expected call of CreateJWT.
func (mr *MockServiceMockRecorder) CreateJWT(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWT", reflect.TypeOf((*MockService)(nil).CreateJWT), ctx, email)
}

// DeleteJWT mocks base method.
func (m *MockService) DeleteJWT(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJWT", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJWT indicates an expected call of DeleteJWT.
func (mr *MockServiceMockRecorder) DeleteJWT(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJWT", reflect.TypeOf((*MockService)(nil).DeleteJWT), ctx, token)
}

// VerifyJWT mocks base method.
func (m *MockService) VerifyJWT(ctx context.Context, id string) (*jwt.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWT", ctx, id)
	ret0, _ := ret[0].(*jwt.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyJWT indicates an expected call of VerifyJWT.
func (mr *MockServiceMockRecorder) VerifyJWT(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWT", reflect.TypeOf((*MockService)(nil).VerifyJWT), ctx, id)
}
