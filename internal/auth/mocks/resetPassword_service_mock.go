// Code generated by MockGen. DO NOT EDIT.
// Source: resetPassword_service.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	auth "nnw_s/internal/auth"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResetPasswordService is a mock of ResetPasswordService interface.
type MockResetPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockResetPasswordServiceMockRecorder
}

// MockResetPasswordServiceMockRecorder is the mock recorder for MockResetPasswordService.
type MockResetPasswordServiceMockRecorder struct {
	mock *MockResetPasswordService
}

// NewMockResetPasswordService creates a new mock instance.
func NewMockResetPasswordService(ctrl *gomock.Controller) *MockResetPasswordService {
	mock := &MockResetPasswordService{ctrl: ctrl}
	mock.recorder = &MockResetPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResetPasswordService) EXPECT() *MockResetPasswordServiceMockRecorder {
	return m.recorder
}

// ResendResetPasswordEmail mocks base method.
func (m *MockResetPasswordService) ResendResetPasswordEmail(ctx context.Context, dto *auth.ResendResetPasswordDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendResetPasswordEmail", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResendResetPasswordEmail indicates an expected call of ResendResetPasswordEmail.
func (mr *MockResetPasswordServiceMockRecorder) ResendResetPasswordEmail(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendResetPasswordEmail", reflect.TypeOf((*MockResetPasswordService)(nil).ResendResetPasswordEmail), ctx, dto)
}

// ResetPassword mocks base method.
func (m *MockResetPasswordService) ResetPassword(ctx context.Context, dto *auth.ResetPasswordDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockResetPasswordServiceMockRecorder) ResetPassword(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockResetPasswordService)(nil).ResetPassword), ctx, dto)
}

// ResetPasswordCode mocks base method.
func (m *MockResetPasswordService) ResetPasswordCode(ctx context.Context, dto *auth.ResetPasswordCodedDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordCode", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPasswordCode indicates an expected call of ResetPasswordCode.
func (mr *MockResetPasswordServiceMockRecorder) ResetPasswordCode(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordCode", reflect.TypeOf((*MockResetPasswordService)(nil).ResetPasswordCode), ctx, dto)
}

// SetupNewPassword mocks base method.
func (m *MockResetPasswordService) SetupNewPassword(ctx context.Context, dto *auth.SetupNewPasswordDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupNewPassword", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupNewPassword indicates an expected call of SetupNewPassword.
func (mr *MockResetPasswordServiceMockRecorder) SetupNewPassword(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupNewPassword", reflect.TypeOf((*MockResetPasswordService)(nil).SetupNewPassword), ctx, dto)
}
