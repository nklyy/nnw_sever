// Code generated by MockGen. DO NOT EDIT.
// Source: auth_service.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	bytes "bytes"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	otp "github.com/pquerna/otp"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// Check2FaCode mocks base method.
func (m *MockIAuthService) Check2FaCode(code, secret string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check2FaCode", code, secret)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Check2FaCode indicates an expected call of Check2FaCode.
func (mr *MockIAuthServiceMockRecorder) Check2FaCode(code, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check2FaCode", reflect.TypeOf((*MockIAuthService)(nil).Check2FaCode), code, secret)
}

// CheckPassword mocks base method.
func (m *MockIAuthService) CheckPassword(password, hashPassword string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", password, hashPassword)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockIAuthServiceMockRecorder) CheckPassword(password, hashPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockIAuthService)(nil).CheckPassword), password, hashPassword)
}

// CreateJWTToken mocks base method.
func (m *MockIAuthService) CreateJWTToken(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWTToken", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJWTToken indicates an expected call of CreateJWTToken.
func (mr *MockIAuthServiceMockRecorder) CreateJWTToken(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWTToken", reflect.TypeOf((*MockIAuthService)(nil).CreateJWTToken), email)
}

// Generate2FaImage mocks base method.
func (m *MockIAuthService) Generate2FaImage(email string) (*bytes.Buffer, *otp.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate2FaImage", email)
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(*otp.Key)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Generate2FaImage indicates an expected call of Generate2FaImage.
func (mr *MockIAuthServiceMockRecorder) Generate2FaImage(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate2FaImage", reflect.TypeOf((*MockIAuthService)(nil).Generate2FaImage), email)
}

// VerifyJWTToken mocks base method.
func (m *MockIAuthService) VerifyJWTToken(id string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWTToken", id)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyJWTToken indicates an expected call of VerifyJWTToken.
func (mr *MockIAuthServiceMockRecorder) VerifyJWTToken(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWTToken", reflect.TypeOf((*MockIAuthService)(nil).VerifyJWTToken), id)
}
