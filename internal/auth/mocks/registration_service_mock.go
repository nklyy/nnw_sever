// Code generated by MockGen. DO NOT EDIT.
// Source: registration_service.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	auth "nnw_s/internal/auth"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegistrationService is a mock of RegistrationService interface.
type MockRegistrationService struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationServiceMockRecorder
}

// MockRegistrationServiceMockRecorder is the mock recorder for MockRegistrationService.
type MockRegistrationServiceMockRecorder struct {
	mock *MockRegistrationService
}

// NewMockRegistrationService creates a new mock instance.
func NewMockRegistrationService(ctrl *gomock.Controller) *MockRegistrationService {
	mock := &MockRegistrationService{ctrl: ctrl}
	mock.recorder = &MockRegistrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationService) EXPECT() *MockRegistrationServiceMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method.
func (m *MockRegistrationService) ActivateUser(ctx context.Context, dto *auth.ActivateUserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser.
func (mr *MockRegistrationServiceMockRecorder) ActivateUser(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockRegistrationService)(nil).ActivateUser), ctx, dto)
}

// RegisterUser mocks base method.
func (m *MockRegistrationService) RegisterUser(ctx context.Context, dto *auth.RegisterUserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockRegistrationServiceMockRecorder) RegisterUser(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockRegistrationService)(nil).RegisterUser), ctx, dto)
}

// ResendVerificationEmail mocks base method.
func (m *MockRegistrationService) ResendVerificationEmail(ctx context.Context, dto *auth.ResendActivationEmailDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendVerificationEmail", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResendVerificationEmail indicates an expected call of ResendVerificationEmail.
func (mr *MockRegistrationServiceMockRecorder) ResendVerificationEmail(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendVerificationEmail", reflect.TypeOf((*MockRegistrationService)(nil).ResendVerificationEmail), ctx, dto)
}

// SetupTwoFA mocks base method.
func (m *MockRegistrationService) SetupTwoFA(ctx context.Context, dto *auth.SetupTwoFaDTO) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupTwoFA", ctx, dto)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupTwoFA indicates an expected call of SetupTwoFA.
func (mr *MockRegistrationServiceMockRecorder) SetupTwoFA(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupTwoFA", reflect.TypeOf((*MockRegistrationService)(nil).SetupTwoFA), ctx, dto)
}

// VerifyUser mocks base method.
func (m *MockRegistrationService) VerifyUser(ctx context.Context, dto *auth.VerifyUserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockRegistrationServiceMockRecorder) VerifyUser(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockRegistrationService)(nil).VerifyUser), ctx, dto)
}
