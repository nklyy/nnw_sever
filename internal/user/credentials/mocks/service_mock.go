// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_credentials is a generated GoMock package.
package mock_credentials

import (
	context "context"
	credentials "nnw_s/internal/user/credentials"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateCredentials mocks base method.
func (m *MockService) CreateCredentials(ctx context.Context, password string, secretOTP credentials.SecretOTP) (*credentials.DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentials", ctx, password, secretOTP)
	ret0, _ := ret[0].(*credentials.DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredentials indicates an expected call of CreateCredentials.
func (mr *MockServiceMockRecorder) CreateCredentials(ctx, password, secretOTP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentials", reflect.TypeOf((*MockService)(nil).CreateCredentials), ctx, password, secretOTP)
}

// ValidatePassword mocks base method.
func (m *MockService) ValidatePassword(ctx context.Context, credentialsDTO *credentials.DTO, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", ctx, credentialsDTO, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePassword indicates an expected call of ValidatePassword.
func (mr *MockServiceMockRecorder) ValidatePassword(ctx, credentialsDTO, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockService)(nil).ValidatePassword), ctx, credentialsDTO, password)
}
